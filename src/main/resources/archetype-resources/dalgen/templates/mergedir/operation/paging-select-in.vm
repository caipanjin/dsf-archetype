#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
${symbol_pound}${symbol_pound} check parameters${symbol_pound}if (${symbol_dollar}{operation.paramType} == "object")    	if (${symbol_dollar}{operation.params.get(0).name} == null) {    		throw new IllegalArgumentException("Can't select by a null data object.");    	}${symbol_pound}end${symbol_pound}${symbol_pound} prepare parameters${symbol_pound}if (${symbol_dollar}{operation.params.size()} == 0)${symbol_pound}set (${symbol_dollar}paramName = "null")${symbol_pound}elseif (${symbol_dollar}{operation.params.size()} == 1)${symbol_pound}if (${symbol_dollar}{operation.param.javaTypePrimitive})        ${symbol_dollar}{operation.param.simpleJavaTypeForPrimitive} param = new ${symbol_dollar}{operation.param.simpleJavaTypeForPrimitive}(${symbol_dollar}{operation.param.name});${symbol_pound}set (${symbol_dollar}paramName = "param")${symbol_pound}else${symbol_pound}set (${symbol_dollar}paramName = ${symbol_dollar}{operation.param.name})${symbol_pound}end${symbol_pound}else        Map param = new HashMap();${symbol_pound}foreach (${symbol_dollar}param in ${symbol_dollar}{operation.params})${symbol_pound}if (${symbol_dollar}param.javaTypeForPrimitive)        param.put("${symbol_dollar}{param.name}", new ${symbol_dollar}{param.simpleJavaTypeForPrimitive}(${symbol_dollar}{param.name}));${symbol_pound}else        param.put("${symbol_dollar}{param.name}", ${symbol_dollar}{param.name});${symbol_pound}end${symbol_pound}end${symbol_pound}set (${symbol_dollar}paramName = "param")${symbol_pound}end        //分页处理        Paginator paginator = new Paginator();        paginator.setItemsPerPage(pageSize);        paginator.setPage(pageNum);        paginator.setItems(((Integer) getSqlMapClientTemplate().queryForObject("${symbol_dollar}{operation.mappedStatementIdForCount}", ${symbol_dollar}{paramName})).intValue());                PageList  pageList = new PageList();        pageList.setPaginator(paginator);		if (paginator.getBeginIndex() <= paginator.getItems()) {            ${symbol_dollar}{paramName}.put("${symbol_dollar}{operation.startRowName}", new Integer(paginator.getBeginIndex()));            ${symbol_dollar}{paramName}.put("${symbol_dollar}{operation.endRowName}", new Integer(paginator.getEndIndex()));		}		//判断开关是否开  	  if (this.getPower() == false) {  		  //直接从原字段取值            pageList.addAll(getSqlMapClientTemplate().queryForList("${symbol_dollar}{operation.mappedStatementId}", ${symbol_dollar}{paramName}));              return pageList;  	  }	  	  //当开关开的时候，从新字段取数值		${symbol_dollar}{table.getQualifiedDOClassName()} opDO = new ${symbol_dollar}{table.getQualifiedDOClassName()}();				List<${symbol_dollar}{table.getQualifiedDOClassName()}> tempValue = getSqlMapClientTemplate().queryForList("${symbol_dollar}{operation.mappedStatementId}", ${symbol_dollar}{paramName});					if (CollectionUtils.isEmpty(tempValue)){		    pageList.add(tempValue);		    return pageList;		}${symbol_pound}if(${symbol_dollar}{table.getTableConfig().bIntegrity()} == true)		    //完整性校验部分	    methodUtils.checkIntegForPaging(tempValue,opDO);${symbol_pound}end         ${symbol_pound}${symbol_pound}下面是机密性的部分${symbol_pound}if(${symbol_dollar}{table.getTableConfig().bConfidentiality()} == true)//调用分页操作时的机密性解密方法          PageList pagelist = methodUtils.getConfResultForPaging(pageList, tempValue,opDO);${symbol_pound}end        return pageList;