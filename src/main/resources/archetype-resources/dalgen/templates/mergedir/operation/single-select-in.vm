#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
${symbol_pound}${symbol_pound}渲染中间部分
	  //判断开关是否开
  	  if (this.getPower() == false) {
  		  //直接从原字段取值
${symbol_pound}if (${symbol_dollar}{operation.returnTypePrimitive})
	    ${symbol_dollar}{operation.simpleReturnTypeForPrimitive} retObj = (${symbol_dollar}{operation.simpleReturnTypeForPrimitive}) getSqlMapClientTemplate().queryForObject("${symbol_dollar}{operation.mappedStatementId}", ${symbol_dollar}{paramName});

		if (retObj == null) {
		    return ${symbol_dollar}{operation.defaultReturnValue};
		} else {
		    return retObj.${symbol_dollar}{operation.simpleReturnType}Value();
		}
${symbol_pound}else
        return (${symbol_dollar}{operation.simpleReturnType}) getSqlMapClientTemplate().queryForObject("${symbol_dollar}{operation.mappedStatementId}", ${symbol_dollar}{paramName});
${symbol_pound}end
  	  }
  	    //当开关开时，从新字段取数值
		${symbol_dollar}{operation.simpleReturnType} opDO = (${symbol_dollar}{operation.simpleReturnType})getSqlMapClientTemplate().queryForObject("${symbol_dollar}{operation.mappedStatementId}", ${symbol_dollar}{paramName});
		
		if (opDO == null) {
		   return opDO;
		}
		
${symbol_pound}if(${symbol_dollar}{table.getTableConfig().bIntegrity()} == true)	
		    //调用完整性比较方法
		    methodUtils.compareInteg(opDO);	
${symbol_pound}end
${symbol_pound}if(${symbol_dollar}{table.getTableConfig().bConfidentiality()} == true)
	     //对于机密性和完整性，由于算法不同，所以分开考虑---获得被保护的机密性字段
		  String conf = opDO.get${symbol_dollar}!{method_getConf}();
		  if (conf == null) {
		    logger.warn("数据库中该机密性字段为空");
			return opDO;
		  }
		 String bytesToString = methodUtils.getConfEncodedResult(conf);
		 
${symbol_pound}end          
      