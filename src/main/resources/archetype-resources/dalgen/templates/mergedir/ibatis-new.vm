#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
${symbol_pound}set (${symbol_dollar}baseClass = "org.springframework.orm.ibatis.support.SqlMapClientDaoSupport")${symbol_pound}if (${symbol_dollar}{table.isAutoSwitchDataSrc})${symbol_pound}set (${symbol_dollar}baseClass = "com.iwallet.biz.dal.common.AutoSwitchDataSrcSqlMapClientDaoSupport")${symbol_pound}end${symbol_pound}set (${symbol_dollar}base = "SqlMapClientDaoSupport")${symbol_pound}if (${symbol_dollar}{table.isAutoSwitchDataSrc})${symbol_pound}set (${symbol_dollar}base = "AutoSwitchDataSrcSqlMapClientDaoSupport")${symbol_pound}end${symbol_pound}parse("copyright.vm")package ${symbol_dollar}{table.ibatisPackage};import ${symbol_dollar}baseClass;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.HashMap;import org.springframework.util.CollectionUtils;import ${symbol_dollar}{table.getUtilsPackage()}.${symbol_dollar}{table.getUtilClassName()};import java.security.GeneralSecurityException;import ${symbol_dollar}{table.qualifiedDAOClassName};// auto generated imports${symbol_pound}foreach(${symbol_dollar}importClass in ${symbol_dollar}table.daoImports) import ${symbol_dollar}importClass;${symbol_pound}end${symbol_pound}set (${symbol_dollar}daoImportList = ${symbol_dollar}table.daoImports)${symbol_pound}foreach(${symbol_dollar}importClass in ${symbol_dollar}table.ibatisImports)${symbol_pound}if( ! (${symbol_dollar}daoImportList.contains(${symbol_dollar}importClass)) )import ${symbol_dollar}importClass;${symbol_pound}end${symbol_pound}end/** * An ibatis based implementation of dao interface <tt>${symbol_dollar}{table.qualifiedDAOClassName}</tt>. *${symbol_pound}parse("description-java.vm") */  @DResource(id = "${symbol_dollar}{table.ibatisPackage}.${symbol_dollar}{table.ibatisClassName}",domain = DistributedResourceDomain.ARCH)public class ${symbol_dollar}{table.ibatisClassName} extends ${symbol_dollar}base implements ${symbol_dollar}{table.DAOClassName} {	private boolean power = false;		public static final String appName = "${symbol_dollar}{plugin.getAppName()}";    public static final String encodeKeyName = "${symbol_dollar}{table.getTableConfig().getEncodekeyname()}";    public static final String abstractKeyName = "${symbol_dollar}{table.getTableConfig().getAbstractkeyname()}";		${symbol_dollar}{table.getUtilClassName()} methodUtils = null;      @DAttribute    public boolean getPower() {        return power;    }    @DAttribute    public void setPower(boolean power) {        this.power = power;    }	@DFunction(type = FunctionType.update)    public void updateResource(String key, Object value) {        if (key.equals("power")) {            this.power = new Boolean(value.toString());        }    }${symbol_pound}if(${symbol_dollar}{table.getTableConfig().getDrmConfig()} == true)	/**     * ���Լ�ע��Ϊ�ֲ�ʽ��Դ��     */    public void register() {        DRMClient.getInstance().register(this);    }${symbol_pound}end    public void setMethodUtils(${symbol_dollar}{table.getUtilClassName()} methodUtils) {        this.methodUtils = methodUtils;    }${symbol_pound}foreach(${symbol_dollar}operation in ${symbol_dollar}table.operations)${symbol_pound}parse("operation/op-${symbol_dollar}{operation.templateSuffix}.vm") ${symbol_pound}parse("operation/opbody-${symbol_dollar}{operation.templateSuffix}.vm")${symbol_pound}end}